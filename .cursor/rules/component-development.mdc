---
alwaysApply: true
---
# Component Development Standards

## Component Structure Guidelines

### File Organization

- Each component should have its own directory under `src/components/`
- Use PascalCase for component names and file names
- Include these files in each component directory:
  - Main component file (e.g., `Button.tsx`)
  - Variant components (e.g., `ButtonPrimary.tsx`, `ButtonOutline.tsx`)
  - `index.ts` for barrel exports
  - `README.md` for component documentation
  - Type definitions file if complex (e.g., `types.ts`)

### Component Implementation

- Use functional components with TypeScript
- Export component props interface with descriptive naming (e.g., `ButtonProps`)
- Use styled-components for styling with theme integration
- Import theme types: `import type {ITheme} from '../../theme'`
- Use theme-aware styling: `${({theme}) => theme.colors.primary}`

### Prop Design

- Use clear, descriptive prop names
- Provide sensible defaults
- Support common React Native props (style, testID, etc.)
- Use discriminated unions for variant props when appropriate
- Document complex props with JSDoc comments

### Export Pattern

```typescript
// In component directory index.ts
export * from './ComponentName'
export * from './ComponentVariant'

// In main components/index.ts
export * from './ComponentName'
```

### Styling Best Practices

- Use theme values consistently
- Support responsive design through theme breakpoints
- Implement proper focus states and accessibility
- Use semantic color names from theme
- Support both light and dark themes

### Example Component Structure

```typescript
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'outline'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  children: React.ReactNode
  onPress?: () => void
  // ... other props
}

export const Button: React.FC<ButtonProps> = ({variant = 'primary', size = 'md', ...props}) => {
  // Implementation
}
```
