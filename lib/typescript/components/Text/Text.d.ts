/// <reference types="react" />
import type { TextProps as TextProperties, TextStyle } from 'react-native';
export type TextProps = {
    fontSize?: TextStyle['fontSize'];
    color?: string;
    fontWeight?: TextStyle['fontWeight'];
    fontFamily?: string;
} & TextProperties;
export declare const Text: import("styled-components/native").IStyledComponent<"native", import("styled-components/native/dist/types").Substitute<TextProperties, TextProps>>;
export declare const TextBold: import("styled-components/native").IStyledComponent<"native", {
    fontSize?: number | undefined;
    color?: string | undefined;
    fontWeight?: "bold" | "normal" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | undefined;
    fontFamily?: string | undefined;
    allowFontScaling?: boolean | undefined;
    children?: import("react").ReactNode;
    ellipsizeMode?: "head" | "clip" | "middle" | "tail" | undefined;
    id?: string | undefined;
    lineBreakMode?: "head" | "clip" | "middle" | "tail" | undefined;
    numberOfLines?: number | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onTextLayout?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").TextLayoutEventData>) => void) | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onPressIn?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onPressOut?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    style?: import("react-native").StyleProp<TextStyle>;
    testID?: string | undefined;
    nativeID?: string | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    adjustsFontSizeToFit?: boolean | undefined;
    dynamicTypeRamp?: "body" | "caption2" | "caption1" | "footnote" | "subheadline" | "callout" | "headline" | "title3" | "title2" | "title1" | "largeTitle" | undefined;
    minimumFontScale?: number | undefined;
    suppressHighlighting?: boolean | undefined;
    disabled?: boolean | undefined;
    selectable?: boolean | undefined;
    selectionColor?: import("react-native").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    dataDetectorType?: "link" | "none" | "phoneNumber" | "email" | "all" | null | undefined;
    android_hyphenationFrequency?: "normal" | "none" | "full" | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    "aria-label"?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    "aria-busy"?: boolean | undefined;
    "aria-checked"?: boolean | "mixed" | undefined;
    "aria-disabled"?: boolean | undefined;
    "aria-expanded"?: boolean | undefined;
    "aria-selected"?: boolean | undefined;
    "aria-labelledby"?: string | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    "aria-hidden"?: boolean | undefined;
    "aria-live"?: "polite" | "assertive" | "off" | undefined;
    "aria-modal"?: boolean | undefined;
    role?: import("react-native").Role | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
}>;
export declare const TextItalic: import("styled-components/native").IStyledComponent<"native", {
    fontSize?: number | undefined;
    color?: string | undefined;
    fontWeight?: "bold" | "normal" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | undefined;
    fontFamily?: string | undefined;
    allowFontScaling?: boolean | undefined;
    children?: import("react").ReactNode;
    ellipsizeMode?: "head" | "clip" | "middle" | "tail" | undefined;
    id?: string | undefined;
    lineBreakMode?: "head" | "clip" | "middle" | "tail" | undefined;
    numberOfLines?: number | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onTextLayout?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").TextLayoutEventData>) => void) | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onPressIn?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onPressOut?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    style?: import("react-native").StyleProp<TextStyle>;
    testID?: string | undefined;
    nativeID?: string | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    adjustsFontSizeToFit?: boolean | undefined;
    dynamicTypeRamp?: "body" | "caption2" | "caption1" | "footnote" | "subheadline" | "callout" | "headline" | "title3" | "title2" | "title1" | "largeTitle" | undefined;
    minimumFontScale?: number | undefined;
    suppressHighlighting?: boolean | undefined;
    disabled?: boolean | undefined;
    selectable?: boolean | undefined;
    selectionColor?: import("react-native").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    dataDetectorType?: "link" | "none" | "phoneNumber" | "email" | "all" | null | undefined;
    android_hyphenationFrequency?: "normal" | "none" | "full" | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    "aria-label"?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    "aria-busy"?: boolean | undefined;
    "aria-checked"?: boolean | "mixed" | undefined;
    "aria-disabled"?: boolean | undefined;
    "aria-expanded"?: boolean | undefined;
    "aria-selected"?: boolean | undefined;
    "aria-labelledby"?: string | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    "aria-hidden"?: boolean | undefined;
    "aria-live"?: "polite" | "assertive" | "off" | undefined;
    "aria-modal"?: boolean | undefined;
    role?: import("react-native").Role | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
}>;
//# sourceMappingURL=Text.d.ts.map